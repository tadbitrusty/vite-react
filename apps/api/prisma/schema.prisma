// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management and authentication
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  phone       String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?

  // User preferences
  isFirstTime     Boolean @default(true)
  emailVerified   Boolean @default(false)
  hasCompletedProfile Boolean @default(false)

  // Relations
  resumes         Resume[]
  jobApplications JobApplication[]
  paymentRecords  PaymentRecord[]
  auditLogs       AuditLog[]

  @@map("users")
}

// Resume storage and management
model Resume {
  id           String   @id @default(cuid())
  userId       String
  fileName     String
  originalName String
  fileSize     Int
  mimeType     String
  contentHash  String
  
  // Resume content
  extractedText String?
  parsedData    Json?
  
  // Processing status
  status       ResumeStatus @default(UPLOADED)
  processedAt  DateTime?
  
  // Metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs         ResumeJob[]

  @@map("resumes")
}

// Job application tracking
model JobApplication {
  id              String   @id @default(cuid())
  userId          String
  resumeId        String?
  
  // Job details
  jobTitle        String
  company         String
  location        String?
  jobDescription  String
  requirements    String?
  
  // Application status
  status          ApplicationStatus @default(DRAFT)
  appliedAt       DateTime?
  
  // Tracking
  source          String? // Indeed, LinkedIn, etc.
  applicationUrl  String?
  
  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("job_applications")
}

// Background job processing
model ResumeJob {
  id            String   @id @default(cuid())
  resumeId      String
  jobType       JobType
  
  // Job details
  templateId    String
  jobDescription String?
  customInstructions String?
  
  // Processing data
  input         Json
  output        Json?
  
  // Status tracking
  status        JobStatus @default(PENDING)
  priority      Int       @default(5)
  
  // Timing
  createdAt     DateTime  @default(now())
  startedAt     DateTime?
  completedAt   DateTime?
  failedAt      DateTime?
  
  // Error handling
  error         String?
  retryCount    Int       @default(0)
  maxRetries    Int       @default(3)
  
  // Relations
  resume        Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([status, priority, createdAt])
  @@map("resume_jobs")
}

// Payment and billing
model PaymentRecord {
  id            String   @id @default(cuid())
  userId        String
  
  // Stripe data
  stripeSessionId     String? @unique
  stripePaymentIntentId String? @unique
  stripeCustomerId    String?
  
  // Payment details
  amount        Int // in cents
  currency      String @default("usd")
  status        PaymentStatus
  
  // Product information
  productType   String // template type, subscription, etc.
  productId     String
  description   String?
  
  // Metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  paidAt        DateTime?
  refundedAt    DateTime?
  
  // Relations
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_records")
}

// Fraud detection and security
model BadEmail {
  id          String   @id @default(cuid())
  email       String   @unique
  reason      String
  attempts    Int      @default(1)
  lastAttempt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Auto-cleanup after 30 days of no attempts
  @@map("bad_emails")
}

model IpTracking {
  id          String   @id @default(cuid())
  ipAddress   String   @unique
  emailCount  Int      @default(1)
  lastEmail   DateTime @default(now())
  isBlocked   Boolean  @default(false)
  blockReason String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ip_tracking")
}

model ChargebackBlacklist {
  id          String   @id @default(cuid())
  email       String?  @unique
  ipAddress   String?
  stripeCustomerId String? @unique
  reason      String
  createdAt   DateTime @default(now())
  
  // Permanent ban
  @@map("chargeback_blacklist")
}

// Analytics and monitoring
model ProcessingAnalytics {
  id            String   @id @default(cuid())
  
  // Request tracking
  requestId     String   @unique
  userId        String?
  ipAddress     String
  userAgent     String?
  
  // Processing metrics
  templateType  String
  processingTimeMs Int
  success       Boolean
  errorType     String?
  errorMessage  String?
  
  // AI metrics
  aiTokensUsed  Int?
  aiModel       String?
  aiLatencyMs   Int?
  
  // Business metrics
  isFirstTimeUser Boolean
  paidRequest     Boolean
  revenue         Int? // in cents
  
  // Timestamp
  createdAt     DateTime @default(now())

  @@index([createdAt, success])
  @@index([templateType, createdAt])
  @@map("processing_analytics")
}

// Audit logging
model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  
  // Event details
  action      String
  resource    String
  resourceId  String?
  oldValues   Json?
  newValues   Json?
  
  // Context
  ipAddress   String
  userAgent   String?
  sessionId   String?
  
  // Metadata
  createdAt   DateTime @default(now())
  
  // Relations
  user        User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@map("audit_logs")
}

// Configuration and feature flags
model AppConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("app_config")
}

// Enums
enum ResumeStatus {
  UPLOADED
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
}

enum ApplicationStatus {
  DRAFT
  APPLIED
  INTERVIEWING
  REJECTED
  ACCEPTED
  WITHDRAWN
}

enum JobType {
  RESUME_OPTIMIZATION
  TEMPLATE_GENERATION
  PDF_CREATION
  EMAIL_DELIVERY
  BACKGROUND_ANALYSIS
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  RETRY
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIAL_REFUND
}